{"version":3,"sources":["components/TeamItem.js","components/BioBricksItem.js","components/SearchBar.js","components/App.js","serviceWorker.js","index.js"],"names":["TeamItem","props","className","item","year","title","country","console","log","schoolAddress","undefined","includes","substring","indexOf","description","href","teamId","target","rel","wiki","BioBricksItem","SearchBar","handleKeyDown","event","key","preventDefault","fetchData","option","selectedTeams","state","search","results","isTeams","selectedOption","contain","tagsBio","tagsTeams","master","query","bind","addToQuery","this","setState","prevState","clickMaster","tag","match","value","input","fetch","method","headers","body","JSON","stringify","then","response","json","responseData","map","abstract","content","url","itemList","itemComponents","length","items","filter","id","checks","element","index","type","checked","onChange","checkChanged","searchTag","onClick","handleOnClickSwitchSearch","handleOnClick","onKeyDown","placeholder","onInputChange","name","checkContainsChanged","Component","App","teams","biobricks","obj","property","hasOwnProperty","data","status","isEmpty","isLoaded","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qZAqDeA,MAjDf,SAAkBC,GACd,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,oBACV,8BAAOD,EAAME,KAAKC,KAAO,KACxB,IAAMH,EAAME,KAAKE,OACtB,wBAAIH,UAAU,oBACV,0BAAMA,UAAU,aAAa,aAC5BD,EAAME,KAAKG,SAEhB,wBAAIJ,UAAU,oBACV,0BAAMA,UAAU,aAAa,YAC5BK,QAAQC,IAAIP,EAAME,KAAKM,oBACMC,IAA7BT,EAAME,KAAKM,iBA0BNA,EAzBUR,EAAME,KAAKM,eA0BtBE,SAAS,KACfF,EAAcG,UAAU,EAAGH,EAAcI,QAAQ,MACjDJ,EAAcE,SAAS,QACvBF,EAAcG,UAAU,EAAGH,EAAcI,QAAQ,SAEjDJ,IA5BH,uBAAGP,UAAU,mBAAmBD,EAAME,KAAKW,aAC3C,uBAAGZ,UAAU,kBAAkB,cAC3B,uBAAGA,UAAU,YACVa,KAAM,qCAAuCd,EAAME,KAAKa,OACxDC,OAAO,SACPC,IAAI,uBACF,qCAAuCjB,EAAME,KAAKa,SAG3D,uBAAGd,UAAU,kBAAkB,cAC3B,uBAAGA,UAAU,YACVa,KAAMd,EAAME,KAAKgB,KACjBF,OAAO,SACPC,IAAI,uBACFjB,EAAME,KAAKgB,OAGpB,8BAKZ,IAAsBV,GCpBPW,MAnBf,SAAuBnB,GACnB,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,oBACTD,EAAME,KAAKE,OAChB,uBAAGH,UAAU,mBAAmBD,EAAME,KAAKW,aAC3C,uBAAGZ,UAAU,kBAAkB,QAC3B,uBAAGA,UAAU,YACVa,KAAMd,EAAME,KAAKgB,KACjBF,OAAO,SACPC,IAAI,uBACFjB,EAAME,KAAKgB,OAGpB,+BCsNGE,G,wDAjOX,WAAYpB,GAAQ,IAAD,uBACf,cAAMA,IAwCVqB,cAAgB,SAACC,GACK,UAAdA,EAAMC,MACND,EAAME,iBACN,EAAKC,cA1CT,IAAMC,EAAS,EAAK1B,MAAM2B,cAAgB,WAAa,UAFxC,OAGf,EAAKC,MAAQ,CACTC,OAAQ,GACRC,QAAS,GACTC,SAAS,EACTC,eAAgBN,EAChBO,SAAS,GAEb,EAAKC,QAAU,CAAC,QAAS,WACzB,EAAKC,UAAY,CAAC,QAAS,OAAQ,SAAU,UAAW,YACxD,EAAKC,OAAS,EAAKpC,MAAMoC,OACzB,EAAKC,MAAQ,GACb,EAAKZ,UAAY,EAAKA,UAAUa,KAAf,gBACjB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAfH,E,0DAmBLhB,GACVA,EAAME,iBACNgB,KAAKf,c,yFAIuBH,G,wEAC5BA,EAAME,iB,SACAgB,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC9BX,SAAUW,EAAUX,Y,OAGxBS,KAAKZ,MAAMG,QAAUS,KAAKC,SAAS,CAC/BT,eAAgB,aAElBQ,KAAKC,SAAS,CACZT,eAAgB,YAEpBQ,KAAKJ,OAAOO,c,wIAYLC,GACPJ,KAAKH,MAAQ,GAGD,SAARO,GAAkBJ,KAAKZ,MAAMC,OAAOgB,MAAM,oBAGlC,WAARD,IACAA,EAAM,iBAIVJ,KAAKH,MAAMO,GAAO,CAAC,CACfX,QAASO,KAAKZ,MAAMK,QACpBa,MAAON,KAAKZ,MAAMC,SAGtBW,KAAKf,e,4EAIUH,G,iFACTkB,KAAKC,SAAS,CAChBT,eAAgBV,EAAMN,OAAO8B,Q,OAEjCN,KAAKD,WAAWC,KAAKZ,MAAMI,gB,oJAK3BQ,KAAKC,SAAS,CACVR,SAAUO,KAAKZ,MAAMK,UAEzBO,KAAKD,WAAWC,KAAKZ,MAAMI,kB,6EAIXV,G,iFACVkB,KAAKC,SAAS,CAChBZ,OAAQP,EAAMN,OAAO8B,Q,OAEzBN,KAAKD,WAAWC,KAAKZ,MAAMI,gB,yIAIlB,IAAD,OACFe,EAAQP,KAAKZ,MAAMG,QAAU,QAAU,YAC7CiB,MAAM,yBAA2BD,EAAQ,SAAU,CAC/CE,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUb,KAAKH,SAEzBiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKhB,SAAS,EAAKb,MAAMG,QAAU,CAC3BD,QAAS2B,EAAaC,KAAI,SAAAxD,GAAI,MAAK,CAC/BE,MAAOF,EAAKE,MACZD,KAAMD,EAAKC,KACXU,YAAaX,EAAKyD,SAClB5C,OAAQb,EAAKa,OACbV,QAASH,EAAKG,QACdG,cAAeN,EAAKM,cACpBU,KAAMhB,EAAKgB,UAGjB,CACEY,QAAS2B,EAAaC,KAAI,SAAAxD,GAAI,MAAK,CAC/BE,MAAOF,EAAKE,MACZD,KAAMD,EAAKC,KACXU,YAAaX,EAAK0D,QAClB1C,KAAMhB,EAAK2D,e,+BAMzB,IAEFC,EAYAC,EAdC,OAKDvB,KAAKZ,MAAMC,OAAOmC,OAAS,GAAKxB,KAAKZ,MAAME,QAAQkC,OAAS,EAC5DF,EAAWtB,KAAKZ,MAAME,QACfU,KAAKZ,MAAMC,OAAOmC,OAAS,GAAmC,IAA9BxB,KAAKZ,MAAME,QAAQkC,SAG1DF,EAAWtB,KAAKxC,MAAMiE,OAMtBH,IAEAC,EAAiBD,EAASI,QAAO,SAAAhE,GAAI,YAAmBO,IAAfP,EAAKE,SAAqBsD,KAAI,SAAAxD,GAC/D,OAAQ,EAAK0B,MAAMG,QACX,kBAAC,EAAD,CAAUR,IAAKrB,EAAKiE,GAAIjE,KAAMA,IAC9B,kBAAC,EAAD,CAAeqB,IAAKrB,EAAKiE,GAAIjE,KAAMA,QAOvD,IACMkE,GADO5B,KAAKZ,MAAMG,QAAUS,KAAKL,UAAYK,KAAKN,SACpCwB,KAAI,SAACW,EAASC,GAC9B,OACI,yBAAK/C,IAAK+C,EAAOrE,UAAU,aACvB,+BACKoE,GAEL,2BACIE,KAAK,QACLzB,MAAOuB,EACPG,QAAS,EAAK5C,MAAMI,iBAAmBqC,EACvCI,SAAU,EAAKC,aAAapC,KAAK,SAM3CqC,EAAY,eAAiBnC,KAAKZ,MAAMG,QAAU,QAAU,aAAe,OAGjF,OACI,6BACI,wBAAI9B,UAAU,cACTuC,KAAKZ,MAAMG,QAAU,OAAS,YADnC,WAGA,4BACI9B,UAAU,aACVsE,KAAK,SACLK,QAASpC,KAAKqC,0BAA0BvC,KAAKE,OAC5CA,KAAKZ,MAAMG,QAAU,YAAc,SAExC,4BACI9B,UAAU,aACVsE,KAAK,SACLK,QAASpC,KAAKsC,cAAcxC,KAAKE,OAHrC,UAMA,0BAAMvC,UAAU,QACZ,2BACIA,UAAU,SACVsE,KAAK,OACLQ,UAAWvC,KAAKnB,cAAciB,KAAKE,MACnCM,MAAON,KAAKZ,MAAMC,OAClBmD,YAAaL,EACbF,SAAUjC,KAAKyC,cAAc3C,KAAKE,SAG1C,6BACI,yBAAKvC,UAAU,aACX,2CAGA,2BACIsE,KAAK,WACLW,KAAK,WACLV,QAAShC,KAAKZ,MAAMK,QACpBwC,SAAUjC,KAAK2C,qBAAqB7C,KAAKE,SAGhD4B,GAEL,6BACKL,Q,GA3NGqB,cC0FTC,G,wDAzFX,WAAYrF,GAAQ,IAAD,8BACf,cAAMA,IACD4B,MAAQ,CACT0D,MAAO,GACPC,UAAW,GACXxD,SAAS,GALE,E,oDASXyD,GACJ,IAAI,IAAIC,KAAYD,EAChB,GAAGA,EAAIE,eAAeD,GAClB,OAAO,EAIf,OAAOrC,KAAKC,UAAUmC,KAASpC,KAAKC,UAAU,M,yCAG/BE,GACfjD,QAAQC,IAAIgD,GACZ,IAAMoC,EAAOpC,EAASC,OAEtB,OADAlD,QAAQC,IAAIoF,EAAKC,QACG,MAAhBD,EAAKC,QAAkBpD,KAAKqD,QAAQF,IACpCrF,QAAQC,IAAI,gBACL,IAEAoF,I,0CAIM,IAAD,OAEhB3C,MAAM,8BAA+B,IAChCM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKhB,SAAS,CACV6C,MAAO7B,EAAaC,KAAI,SAAAxD,GAAI,MAAK,CAC7BE,MAAOF,EAAKE,MACZD,KAAMD,EAAKC,KACXU,YAAaX,EAAKyD,SAClB5C,OAAQb,EAAKa,OACbV,QAASH,EAAKG,QACdG,cAAeN,EAAKM,cACpBU,KAAMhB,EAAKgB,cAM3B8B,MAAM,kCAAmC,IACpCM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKhB,SAAS,CACVqD,UAAU,EACVP,UAAW9B,EAAaC,KAAI,SAAAxD,GAAI,MAAK,CACjCE,MAAOF,EAAKE,MACZS,YAAaX,EAAK0D,QAClB1C,KAAMhB,EAAK2D,e,oCAQ3BrB,KAAKC,SAAS,CACVV,SAAUS,KAAKZ,MAAMG,Y,+BAKzB,OAEI,yBAAK9B,UAAU,OACVuC,KAAKZ,MAAMG,QAAU,kBAAC,EAAD,CAClBkC,MAAOzB,KAAKZ,MAAM0D,MAClBlD,OAAQI,KACRb,eAAe,IACd,kBAAC,EAAD,CACDsC,MAAOzB,KAAKZ,MAAM2D,UAClBnD,OAAQI,KACRb,eAAe,S,GAnFjByD,cCMEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrD,MACvB,2DCZNsD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxG,QAAQwG,MAAMA,EAAMC,c","file":"static/js/main.419b2254.chunk.js","sourcesContent":["import React from \"react\";\nimport './TeamItem.css'\n\n// Component for displaying one team item in the team search\nfunction TeamItem(props) {\n    return (\n        <div className=\"team-item\">\n            <h2 className=\"team-item-header\">\n                <span>{props.item.year + \" \"}</span>\n                {\" \" + props.item.title}</h2>\n            <h2 className=\"team-item-header\">\n                <span className=\"span-name\">{\"Country: \"}</span>\n                {props.item.country}\n            </h2>\n            <h2 className=\"team-item-header\">\n                <span className=\"span-name\">{\"School: \"}</span>\n                {console.log(props.item.schoolAddress)}\n                {props.item.schoolAddress !== undefined\n                && schoolFormat(props.item.schoolAddress)\n                }\n            </h2>\n            <p className=\"team-item-descr\">{props.item.description}</p>\n            <p className=\"team-item-wiki\">{\"More info: \"}\n                <a className=\"wiki-link\"\n                   href={\"https://igem.org/Team.cgi?team_id=\" + props.item.teamId}\n                   target=\"_blank\"\n                   rel=\"noopener noreferrer\">\n                    {\"https://igem.org/Team.cgi?team_id=\" + props.item.teamId}\n                </a>\n            </p>\n            <p className=\"team-item-wiki\">{\"Team wiki: \"}\n                <a className=\"wiki-link\"\n                   href={props.item.wiki}\n                   target=\"_blank\"\n                   rel=\"noopener noreferrer\">\n                    {props.item.wiki}\n                </a>\n            </p>\n            <hr/>\n        </div>\n    )\n}\n\nfunction schoolFormat(schoolAddress) {\n    if(schoolAddress.includes(\",\")) {\n        return schoolAddress.substring(0, schoolAddress.indexOf(\",\"))\n    } else if (schoolAddress.includes(\"http\")) {\n        return schoolAddress.substring(0, schoolAddress.indexOf(\"http\"))\n    } else {\n        return schoolAddress\n    }\n}\n\nexport default TeamItem","import React from \"react\";\nimport './TeamItem.css'\n\n// Component for displaying one biobrick item in the main page\nfunction BioBricksItem(props) {\n    return (\n        <div className=\"team-item\">\n            <h2 className=\"team-item-header\">\n                {props.item.title}</h2>\n            <p className=\"team-item-descr\">{props.item.description}</p>\n            <p className=\"team-item-wiki\">{\"url: \"}\n                <a className=\"wiki-link\"\n                   href={props.item.wiki}\n                   target=\"_blank\"\n                   rel=\"noopener noreferrer\">\n                    {props.item.wiki}\n                </a>\n            </p>\n            <hr/>\n        </div>\n    )\n}\n\nexport default BioBricksItem","import React, {Component} from \"react\";\nimport TeamItem from \"./TeamItem\";\nimport BioBricksItem from \"./BioBricksItem\";\nimport './SearchBar.css';\n\n// This class creates search bar for teams or biobricks\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props);\n        const option = this.props.selectedTeams ? \"abstract\" : \"content\"\n        this.state = {\n            search: '',\n            results: [],\n            isTeams: true,\n            selectedOption: option,\n            contain: true\n        }\n        this.tagsBio = [\"title\", \"content\"]\n        this.tagsTeams = [\"title\", \"year\", \"school\", \"country\", \"abstract\"]\n        this.master = this.props.master\n        this.query = {}\n        this.fetchData = this.fetchData.bind(this)\n        this.addToQuery = this.addToQuery.bind(this)\n    }\n\n    // This function handles search button click\n    handleOnClick(event) {\n        event.preventDefault();\n        this.fetchData()\n    }\n\n    // This function handles click on switch search bar button\n    async handleOnClickSwitchSearch(event) {\n        event.preventDefault();\n        await this.setState(prevState => ({\n            isTeams: !prevState.isTeams\n        }));\n\n        this.state.isTeams ? this.setState({\n            selectedOption: \"abstract\"\n        })\n        : this.setState({\n            selectedOption: \"content\"\n        })\n        this.master.clickMaster();\n    }\n\n    // This function handles enter key press\n    handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.fetchData()\n        }\n    }\n\n    // This function adds parameter to POST query, where property name is \"tag\" variable\n    addToQuery(tag) {\n        this.query = {}\n\n        // if the tag name is year and search text includes alphabet characters, don't include it to query\n        if (tag === \"year\" && this.state.search.match(/^$|^[A-Za-z]+$/))\n            return\n\n        if (tag === \"school\")\n            tag = \"schoolAddress\"\n\n        // build query according to current text in search bar and if the contain checkbox is checked\n        // name of the property is derived from name of currently checked radio button\n        this.query[tag] = [{\n            contain: this.state.contain,\n            value: this.state.search\n        }];\n        // after constructing a query we send a request to API\n        this.fetchData()\n    }\n\n    // This function sets new state of radio button and adds new property to query\n    async checkChanged(event) {\n        await this.setState({\n            selectedOption: event.target.value\n        })\n        this.addToQuery(this.state.selectedOption)\n    }\n\n    // This function sets new state of \"contains\" checkbox and adds new property to query\n    checkContainsChanged() {\n        this.setState({\n            contain: !this.state.contain\n        })\n        this.addToQuery(this.state.selectedOption)\n    }\n\n    // This function sets new value to property each time something to search is written\n    async onInputChange(event) {\n        await this.setState({\n            search: event.target.value\n        })\n        this.addToQuery(this.state.selectedOption)\n    }\n\n    // This function build and send POST request to API with created query\n    fetchData() {\n        const input = this.state.isTeams ? \"teams\" : \"biobricks\"\n        fetch(\"http://localhost:3001/\" + input + \"/match\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.query)\n        })\n            .then(response => response.json())\n            .then(responseData => {\n                this.setState(this.state.isTeams ? {\n                        results: responseData.map(item => ({\n                            title: item.title,\n                            year: item.year,\n                            description: item.abstract,\n                            teamId: item.teamId,\n                            country: item.country,\n                            schoolAddress: item.schoolAddress,\n                            wiki: item.wiki\n                        }))\n                    }\n                    : {\n                        results: responseData.map(item => ({\n                            title: item.title,\n                            year: item.year,\n                            description: item.content,\n                            wiki: item.url,\n                        }))\n                    })\n            })\n    }\n\n    render() {\n\n        var itemList\n\n        // If there are no search results return default list of all items\n        if (this.state.search.length > 0 && this.state.results.length > 0) {\n            itemList = this.state.results\n        } else if (this.state.search.length > 0 && this.state.results.length === 0) {\n\n        } else {\n            itemList = this.props.items\n        }\n        // itemList = this.state.search.length > 0 && this.state.results.length > 0 ? this.state.results : this.props.items\n\n        var itemComponents\n\n        if (itemList) {\n            // This function maps item Component to every search result object\n            itemComponents = itemList.filter(item => item.title !== undefined).map(item => {\n                    return (this.state.isTeams ?\n                            <TeamItem key={item.id} item={item}/> :\n                            <BioBricksItem key={item.id} item={item}/>\n                    )\n                }\n            );\n        }\n\n        // Here is every item from \"tags\" maps on radio buttons and binded with their functionality\n        const tags = this.state.isTeams ? this.tagsTeams : this.tagsBio\n        const checks = tags.map((element, index) => {\n            return (\n                <div key={index} className=\"radio-tag\" >\n                    <label >\n                        {element}\n                    </label>\n                    <input\n                        type=\"radio\"\n                        value={element}\n                        checked={this.state.selectedOption === element}\n                        onChange={this.checkChanged.bind(this)}\n                    />\n                </div>\n            )\n        })\n\n        const searchTag = \"Search for \" + (this.state.isTeams ? \"teams\" : \"biobricks\") + \" ...\"\n\n        // Here the search bar and search results are rendered\n        return (\n            <div>\n                <h1 className=\"App-header\">\n                    {this.state.isTeams ? \"Team\" : \"BioBricks\"} Seeker\n                </h1>\n                <button\n                    className=\"btn-switch\"\n                    type=\"submit\"\n                    onClick={this.handleOnClickSwitchSearch.bind(this)}>\n                    {this.state.isTeams ? \"BioBricks\" : \"Teams\"}\n                </button>\n                <button\n                    className=\"btn-search\"\n                    type=\"submit\"\n                    onClick={this.handleOnClick.bind(this)}>\n                    Search\n                </button>\n                <form className=\"form\">\n                    <input\n                        className=\"search\"\n                        type=\"text\"\n                        onKeyDown={this.handleKeyDown.bind(this)}\n                        value={this.state.search}\n                        placeholder={searchTag}\n                        onChange={this.onInputChange.bind(this)}\n                    />\n                </form>\n                <div>\n                    <div className=\"radio-tag\">\n                        <label>\n                            contains\n                        </label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"contains\"\n                            checked={this.state.contain}\n                            onChange={this.checkContainsChanged.bind(this)}\n                        />\n                    </div>\n                    {checks}\n                </div>\n                <div>\n                    {itemComponents}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar","import React, {Component} from \"react\";\nimport './App.css'\nimport SearchBar from \"./SearchBar\";\nimport data from \"../igem_data-2\"\n\n// This class renders whole web application\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teams: [],\n            biobricks: [],\n            isTeams: true\n        }\n    }\n\n    isEmpty(obj) {\n        for(let property in obj) {\n            if(obj.hasOwnProperty(property)) {\n                return false;\n            }\n        }\n\n        return JSON.stringify(obj) === JSON.stringify({});\n    }\n\n    handleResultsOfAPI(response) {\n        console.log(response);\n        const data = response.json();\n        console.log(data.status);\n        if (data.status === 404 || this.isEmpty(data)) {\n            console.log(\"Empty object\");\n            return []\n        } else {\n            return data;\n        }\n    }\n    // This function is called only once when the App class renders for the first time\n    componentDidMount() {\n        // fetch function sends GET request to API for all team data\n        fetch(\"http://localhost:3001/teams\", {})\n            .then(response => response.json())\n            .then(responseData => {\n                this.setState({\n                    teams: responseData.map(item => ({\n                        title: item.title,\n                        year: item.year,\n                        description: item.abstract,\n                        teamId: item.teamId,\n                        country: item.country,\n                        schoolAddress: item.schoolAddress,\n                        wiki: item.wiki\n                    }))\n                })\n            })\n\n        // this fetch gets all biobricks data\n        fetch(\"http://localhost:3001/biobricks\", {})\n            .then(response => response.json())\n            .then(responseData => {\n                this.setState({\n                    isLoaded: true,\n                    biobricks: responseData.map(item => ({\n                        title: item.title,\n                        description: item.content,\n                        wiki: item.url,\n                    }))\n                })\n            })\n    }\n\n    // This function switches between rendering search bar for teams or for biobricks\n    clickMaster() {\n        this.setState({\n            isTeams: !this.state.isTeams\n        })\n    }\n\n    render() {\n        return (\n            // App class renders particular search bar according to isTeams value\n            <div className=\"App\">\n                {this.state.isTeams ? <SearchBar\n                    items={this.state.teams}\n                    master={this}\n                    selectedTeams={true}\n                /> : <SearchBar\n                    items={this.state.biobricks}\n                    master={this}\n                    selectedTeams={false}\n                />}\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}